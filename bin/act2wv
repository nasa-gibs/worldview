#!/usr/bin/env python

import os
from optparse import OptionParser
import sys
import json

prog = os.path.basename(__file__)
basedir = os.path.dirname(__file__)
version = "1.2.0"
help_description = """\
Using a json index file, this converts ACT (Adobe Color Table) files into
paletttes suitable for Worldview. Each color table is written out to
a separate file.
"""

default_index = os.path.join(basedir, "act", "index.json")
default_act_dir = os.path.join(basedir, "act")

parser = OptionParser(usage="Usage: %s [options] <output_dir>" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
parser.add_option("-a", "--act-dir", default=default_act_dir,
                  help="use this as the base directory for ACT files "
                       "instead of %s" % default_act_dir)
parser.add_option("-i", "--index", default=default_index,
                  help="use this index file instead of %s" % default_index)
parser.add_option("-v", "--verbose", action="store_true",
                  help="prints information about tasks being performed")

(options, args) = parser.parse_args()

def notify(message):
    if options.verbose:
        print "%s: %s" % (prog, message)

def error(message):
    sys.stderr.write("%s: ERROR: %s\n" % (prog, message))

def fatal(message):
    error(message)
    sys.exit(1)


if len(args) != 1:
    parser.error("Invalid number of arguments")
output_dir = args[0]

if not os.path.exists(options.index):
    fatal("Index file %s does not exist" % options.index)
if not os.path.exists(options.act_dir):
    fatal("ACT base directory %s does not exist" % options.act_dir)
if not os.path.exists(output_dir):
    fatal("Output directory %s does not exist" % output_dir)

notify("Index file: %s" % options.index)
notify("ACT base directory: %s" % options.act_dir)
notify("Output directory: %s" % output_dir)

try:
    with open(options.index) as fp:
        index = json.load(fp)
except Exception as e:
    sys.stderr.write("%s: Unable to load index %s\n%s" % (prog, options.index,
                                                          str(e)))
    sys.exit(1)

return_code = 0
for act in index:
    act_file = os.path.join(options.act_dir, act["input"])
    notify("Reading ACT: %s" % act_file)
    try:
        with open(act_file) as fp:
            data = fp.read()
    except Exception as e:
        sys.stderr.write("%s: Unable to load %s\n%s" % (prog, act_file,
                                                        str(e)))
        return_code = 1
    stops = []
    for i in xrange(0, 255 * 3, 3):
        entry = {
            "at": str(i / 3.0 / 256.0),
            "r": ord(data[i]),
            "g": ord(data[i+1]),
            "b": ord(data[i+2]),
            "a": 255
        }
        stops += [entry]
    palette = {
        act["id"]: {
            "id": act["id"],
            "name": act["name"],
            "stops": stops
        }
    }
    palette_file = os.path.join(output_dir, "%s.json" % act["id"])
    notify("Writing palette: %s" % palette_file)
    with open(palette_file, "w") as fp:
        json.dump(palette, fp, sort_keys=True, indent=4,
                  separators=(',', ': '))


sys.exit(return_code)
