#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#

from optparse import OptionParser
import os
import re
import sys
import json
import xmltodict

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "2.0.0"
help_description = """\
Converts colormaps to JSON files
"""

parser = OptionParser(usage="Usage: %s <config_file> <input_dir> <output_dir>" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)

(options, args) = parser.parse_args()
if len(args) != 3:
    parser.error("Invalid number of arguments")

config_file = args[0]
input_dir = args[1]
output_dir = args[2]

with open(config_file) as fp:
    config = json.load(fp)
skips = config.get("skipPalettes", [])

def to_list(v):
    return v if isinstance(v, list) else [v]

def get_map_type(entries):
    for entry in entries:
        if entry.get("@transparent", "false") == "true":
            pass
        elif "@value" in entry:
            return "scale"
        else:
            return "class"
    return "special"

def process_entries(entries):
    entries = to_list(entries)
    map_type = get_map_type(entries)

    colors = []
    labels = []
    values = []

    color_format = "{0:02x}{1:02x}{2:02x}{3:02x}"

    for entry in entries:
        r,g,b = entry["@rgb"].split(",")
        a = 0 if entry.get("@transparent", "false") == "true" else 255
        if a == 0:
            continue
        colors += [color_format.format(int(r), int(g), int(b), a)]
        labels += [entry["@label"]]
        if map_type == "scale":
            items = re.sub(r"[\(\)\[\]]", "", entry["@value"]).split(",")
            try:
                values += [map(lambda v: float(v), items)]
                for item in items:
                    v = float(item)
                    if v == float("inf"):
                        v = sys.float_info.max
                    if v == float("-inf"):
                        v = sys.float_info.min
                    values += [v]
            except ValueError as e:
                raise ValueError("Invalid value: %s" % entry["@value"])

    result = {
        "type": map_type,
        "colors": colors,
        "labels": labels
    }
    if map_type == "scale":
        result["values"] = values
    return result


def process_file(file):
    input_file = os.path.join(root, file)
    id = os.path.splitext(os.path.basename(input_file))[0]
    if id in skips:
        sys.stderr.write("%s:  WARN: [%s] %s\n" % (prog, input_file,
                "Skipping"))
        return

    with open(input_file) as fp:
        xml = fp.read()
    document = xmltodict.parse(xml)

    colormaps = to_list(document["ColorMaps"]["ColorMap"])
    maps = []
    for colormap in colormaps:
        result = {}
        entries = process_entries(colormap["Entries"]["ColorMapEntry"])
        if entries["type"] == "special":
            continue
        result["entries"] = entries
        if "@title" in colormap:
            result["entries"]["title"] = colormap["@title"]
        if "Legend" in colormap:
            legend = process_entries(colormap["Legend"]["LegendEntry"])
            result["legend"] = legend
            if "@title" in colormap:
                result["legend"]["title"] = colormap["@title"]
        maps += [result]

    data = {
        "id": id,
        "maps": maps
    }
    json_options = {}
    json_options["indent"] = 4
    json_options["separators"] = (',', ': ')

    output_file = os.path.join(output_dir, id + ".json")
    with open(output_file, "w") as fp:
        json.dump(data, fp, **json_options)

# Main
file_count = 0
error_count = 0

for root, dirs, files in os.walk(input_dir):
    for file in files:
        try:
            file_count += 1
            process_file(file)
        except Exception as e:
            sys.stderr.write("%s: ERROR: [%s] %s\n" % (prog, file, str(e)))
            error_count += 1

print "%s: %d error(s), %d file(s)" % (prog, error_count, file_count)

if error_count > 0:
    sys.exit(1)
