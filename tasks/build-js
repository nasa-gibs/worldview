#!/usr/bin/env node
// template from https://github.com/petesaia/node-native-task-runner/blob/master/bin/build-js

// const UglifyJS = require('uglify-js');
const fs = require('fs');
const browserify = require('browserify');
const watchify = require('watchify');

const entry = 'main.js';
const output = './web/js/wv.js';
const outputMin = './build/worldview/web/js/wv.min.js';

// override, should set this from an argument: --dev or --prod
// and default to dev
process.env.NODE_ENV = 'development';

const b = browserify(entry, {
  debug: true, // Makes bundle size larger
  cache: {},
  packageCache: {},
  plugin: [process.env.NODE_ENV !== 'production' ? watchify : null],
  basedir: './web/js'
}).transform('babelify', { presets: ['env'] });

function bundle() {
  const stream = fs.createWriteStream(output);

  const onComplete = (function() {
    const begin = Date.now();

    return function() {
      console.log('Build complete in ' + (Date.now() - begin) / 1000 + 'secs');
    };
  })();

  b.bundle()
    .on('error', function(err) {
      console.error(err);
      this.emit('end');
    })
    .pipe(stream);

  stream.on('finish', function() {
    if (process.env.NODE_ENV === 'production') {
      // console.log('Complete, now compressing because production.');

      // const minified = UglifyJS.minify(fs.readFileSync(output, 'utf8'), {
      //   // warnings: true,
      //   compress: {
      //     dead_code: true
      //   }
      // });

      // if (minified.error) {
      //   return console.error('UGLIFY Error:', minified.error);
      // }

      // fs.writeFileSync(outputMin, minified.code);
      // onComplete();

    } else {
      console.log('All done! (dev mode - not compressing)');
      onComplete();
    }
  });
}

bundle();

b.on('update', bundle);
